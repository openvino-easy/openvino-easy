name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        cd openvino-easy
        python -m build
    
    - name: Check package
      run: |
        cd openvino-easy
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: openvino-easy/dist/

  test-install:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Test install from wheel  
      run: |
        pip install dist/*.whl
        # Test basic package structure
        python -c "print('Testing basic import...')"
        python -c "import sys; print('Python path:', sys.path[:3])"
        python -c "import pkg_resources; print('Installed packages:', [p.key for p in pkg_resources.working_set if 'openvino' in p.key])"
        # Test import with proper error handling
        python -c "
        import sys
        try:
            import oe
            print('✓ Package import successful')
            print('Package version:', getattr(oe, '__version__', 'unknown'))
            print('OpenVINO available:', getattr(oe, '_OV_AVAILABLE', 'unknown'))
        except ImportError as e:
            if 'OpenVINO runtime not found' in str(e):
                print('✓ Expected behavior: Package correctly detects missing OpenVINO and provides helpful error')
                print('Error message preview:', str(e)[:100] + '...')
            else:
                print('✗ Unexpected import error:', e)
                sys.exit(1)
        except Exception as e:
            print('✗ Unexpected error during import:', e)
            sys.exit(1)
        "

  publish-pypi:
    needs: [build, test-install]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/